
#ifndef INC_STM32F407XX_H_
#define INC_STM32F407XX_H_
#include <stdint.h>
#include <string.h>

/*
 * Microprocessor Defines
 */

#define NVIC_ISER0			( (uint32_t*)(0xE000E100) )

#define __IO volatile

#define SET_BIT(REG,BIT)        ((REG)|= (BIT))
#define CLEAR_BIT(REG,BIT)       ((REG)&= ~(BIT))
#define READ_BIT(REG,BIT)       ((REG)& (BIT))
#define UNUSED(x)				(void)x

typedef enum
{
	DISABLE = 0x0U,
	ENABLE = !DISABLE

}FunctionalState_t;
/*
 *
 * IRQ Numbers of MCU  == Vector Table
 *
 */

typedef enum
{

	EXTI0_IRQNumber = 6,
	EXTI1_IRQNumber = 7,
	EXTI2_IRQNumber = 8,
	EXTI3_IRQNumber = 9


}IRQNumber_TypeDef_t;




/*
 *
 * Memory Base Adress
 *
 */

#define FLASH_BASE_ADDR		 (0x08000000UL)  /* Flash Base Address (up to 1MB) */
#define SRAM1_BASE_ADDR		 (0x20000000UL)	 /* SRAM1 Base Address 112 KB      */
#define SRAM2_BASE_ADDR      (0x2001C000UL)	 /* SRAM2 Base Address 16 KB       */

/*
 *
 * Peripheral Base Addresses
 *
 */

#define PERIPH_BASE_ADDR 	 (0x40000000UL) 		          /* Base Address for all peripherals */

#define APB1_BASE_ADDR 		 PERIPH_BASE_ADDR 		          /* APB1 Bus Domain Base Address     */
#define APB2_BASE_ADDR 	    (PERIPH_BASE_ADDR + 0x00010000UL) /* APB2 Bus Domain Base Address     */
#define AHB1_BASE_ADDR 		(PERIPH_BASE_ADDR + 0x00020000UL) /* AHB1 Bus Domain Base Address     */
#define AHB2_BASE_ADDR 		(PERIPH_BASE_ADDR + 0x10000000UL) /* AHB2 Bus Domain Base Address     */

/*
 *
 * APB1 PERIPHERALS Base Addresses
 *
 */

#define TIM2_BASE_ADDR 		(APB1_BASE_ADDR  + 0x0000UL) /* Timer2 Base Address */
#define TIM3_BASE_ADDR		(APB1_BASE_ADDR  + 0x0400UL) /* Timer3 Base Address */
#define TIM4_BASE_ADDR		(APB1_BASE_ADDR  + 0x0800UL) /* Timer4 Base Address */


#define SPI2_BASE_ADDR		(APB1_BASE_ADDR  + 0x3800UL) /* SPI 2 Base Address */
#define SPI3_BASE_ADDR		(APB1_BASE_ADDR  + 0x3C00UL) /* SPI 3 Base Address */

#define USART2_BASE_ADDR	(APB1_BASE_ADDR  + 0x4400UL) /* USART 2 Base Address */
#define USART3_BASE_ADDR	(APB1_BASE_ADDR  + 0x4800UL) /* USART 3 Base Address */

#define UART4_BASE_ADDR		(APB1_BASE_ADDR  + 0x4C00UL) /* UART 4 Base Address */
#define UART5_BASE_ADDR		(APB1_BASE_ADDR  + 0x5000UL) /* UART 5 Base Address */


#define I2C1_BASE_ADDR		(APB1_BASE_ADDR  + 0x5400UL) /* I2C1 Base Address */
#define I2C2_BASE_ADDR		(APB1_BASE_ADDR  + 0x5800UL) /* I2C2 Base Address */
#define I2C3_BASE_ADDR		(APB1_BASE_ADDR  + 0x5C00UL) /* I2C3 Base Address */

/*
 *
 * APB2 PERIPHERALS Base Addresses
 *
 */

#define TIM1_BASE_ADDR		(APB2_BASE_ADDR  + 0x0000UL) /* Timer 1 Base Address */
#define TIM8_BASE_ADDR		(APB2_BASE_ADDR  + 0x0400UL) /* Timer 8 Base Address */

#define USART1_BASE_ADDR	(APB2_BASE_ADDR  + 0x1000UL) /* USART 1 Base Address */
#define USART6_BASE_ADDR	(APB2_BASE_ADDR  + 0x1400UL) /* USART 6 Base Address */

#define SPI1_BASE_ADDR	    (APB2_BASE_ADDR  + 0x3000UL) /* SPI 1 Base Address   */
#define SPI4_BASE_ADDR	    (APB2_BASE_ADDR  + 0x3400UL) /* SPI 4 Base Address   */

#define SYSCFG_BASE_ADDR	(APB2_BASE_ADDR  + 0x3800UL) /* SYSCFG Base Address  */

#define EXTI_BASE_ADDR	    (APB2_BASE_ADDR  + 0x3C00UL) /* SYSCFG Base Address  */


/*
 *
 * AHB1 PERIPHERALS Base Addresses
 *
 */

#define GPIOA_BASE_ADDR      (AHB1_BASE_ADDR + 0x0000UL) /*GPIOA Base Address */
#define GPIOB_BASE_ADDR      (AHB1_BASE_ADDR + 0x0400UL) /*GPIOB Base Address */
#define GPIOC_BASE_ADDR      (AHB1_BASE_ADDR + 0x0800UL) /*GPIOC Base Address */
#define GPIOD_BASE_ADDR      (AHB1_BASE_ADDR + 0x0C00UL) /*GPIOD Base Address */
#define GPIOE_BASE_ADDR      (AHB1_BASE_ADDR + 0x1000UL) /*GPIOE Base Address */

#define RCC_BASE_ADDR        (AHB1_BASE_ADDR + 0x3800UL) /*RCC Base Address */

/*
 *
 * Peripheral Structure Definitions
 *
 */


typedef struct
{
	__IO uint32_t MODER;            /*!< GPIO port mode register                  Address offset = 0x0000  */
	__IO uint32_t OTYPER;			/*!< GPIO port output type register           Address offset = 0x0004  */
	__IO uint32_t OSPEEDR;			/*!< GPIO port output speed register          Address offset = 0x0008  */
	__IO uint32_t PUPDR;			/*!< GPIO port pull-up/pull-down register     Address offset = 0x000C  */
	__IO uint32_t IDR;				/*!< GPIO port input data register            Address offset = 0x0010  */
	__IO uint32_t ODR;				/*!< GPIO port output data register           Address offset = 0x0014  */
	__IO uint32_t BSRR;				/*!< GPIO port bit set/reset register         Address offset = 0x0018  */
	__IO uint32_t LCKR;             /*!< GPIO port configuration lock register    Address offset = 0x001C  */
	__IO uint32_t AFR[2];           /*!< GPIO alternate function register         Address offset = 0x0020  */

}GPIO_TypeDef_t;

typedef struct
{
	__IO uint32_t CR;				/*!< RCC clock control register                     				  Address offset = 0x0000  */
	__IO uint32_t PLLCCFGR;			/*!< RCC pll configuration register               					  Address offset = 0x0004  */
	__IO uint32_t CFGR;				/*!< RCC clock control register               						  Address offset = 0x0008  */
	__IO uint32_t CIR;				/*!< RCC clock interrupt register               					  Address offset = 0x000C  */
	__IO uint32_t AHB1RSTR;			/*!< RCC AHB1 peripheral reset register               				  Address offset = 0x0010  */
	__IO uint32_t AHB2RSTR;			/*!< RCC AHB2 peripheral reset register                 			  Address offset = 0x0014  */
	__IO uint32_t AHB3RSTR;			/*!< RCC AHB3 peripheral reset register                				  Address offset = 0x0018  */
	__IO uint32_t RESERVED0;		/*!< RESERVED AREA               									  Address offset = 0x001C  */
	__IO uint32_t APB1RSTR;			/*!< RCC APB1 peripheral reset register                 			  Address offset = 0x0020  */
	__IO uint32_t APB2RSTR;			/*!< RCC APB2 peripheral reset register                 			  Address offset = 0x0024  */
	__IO uint32_t RESERVED1[2];		/*!< RESERVED AREA                 									  Address offset = 0x0028  */
	__IO uint32_t AHB1ENR;			/*!< RCC AHB1 peripheral clock enable register                 	 	  Address offset = 0x0030  */
	__IO uint32_t AHB2ENR;			/*!< RCC AHB2 peripheral clock enable register                  	  Address offset = 0x0034  */
	__IO uint32_t AHB3ENR;			/*!< RCC AHB3 peripheral clock enable register                  	  Address offset = 0x0038  */
	__IO uint32_t RESERVED2;		/*!< RESERVED AREA                  								  Address offset = 0x003C  */
	__IO uint32_t APB1ENR;			/*!< RCC APB1 peripheral clock enable register                        Address offset = 0x0040  */
	__IO uint32_t APB2ENR;			/*!< RCC APB2 peripheral clock enable register                        Address offset = 0x0044  */
	__IO uint32_t RESERVED3[2];		/*!< RESERVED AREA                                                    Address offset = 0x0048  */
	__IO uint32_t AHB1LPENR;		/*!< RCC AHB1 peripheral clock enable in low power mode register      Address offset = 0x0050  */
	__IO uint32_t AHB2LPENR;		/*!< RCC AHB2 peripheral clock enable in low power mode register      Address offset = 0x0054  */
	__IO uint32_t AHB3LPENR;		/*!< RCC AHB3 peripheral clock enable in low power mode register      Address offset = 0x0058  */
	__IO uint32_t RESERVED4;		/*!< RESERVED AREA                                                    Address offset = 0x005C  */
	__IO uint32_t APB1LPENR;		/*!< RCC APB1 peripheral clock enable in low power mode register      Address offset = 0x0060  */
	__IO uint32_t APB2LPENR;		/*!< RCC APB2 peripheral clock enable in low power mode register      Address offset = 0x0064  */
	__IO uint32_t RESERVED5[2];		/*!< RESERVED AREA                 									  Address offset = 0x0068  */
	__IO uint32_t BDCR;				/*!< RCC backup domain control register                               Address offset = 0x0070  */
	__IO uint32_t CSR;				/*!< RCC clock control & status register                              Address offset = 0x0074  */
	__IO uint32_t RESERVED6[2];		/*!< RESERVED AREA                                                    Address offset = 0x0078  */
	__IO uint32_t SSCGR;			/*!< RCC spread spectrum clock generation register                    Address offset = 0x0080  */
	__IO uint32_t PLLI2SCFGR;		/*!< RCC PLLI2C configuration register               				  Address offset = 0x0084  */


}RCC_TypeDef_t;


typedef struct
{
	__IO uint32_t MEMRMP;			/*!< SYSCFG memory remap register 									Address Offset= 0x00 */
	__IO uint32_t PMC;				/*!< SYSCFG peripheral mode configuration register 					Address Offset= 0x04 */
	__IO uint32_t EXTI_CR[4];		/*!< SYSCFG external interrupt configuration register 				Address Offset= 0x08 */
	__IO uint32_t CMPCR;			/*!< Compensation cell control register  							Address Offset= 0x20 */

}SYSCFG_TypeDef_t;

typedef struct
{

	__IO uint32_t IMR;				/*!< interrupt mask register 									   Address Offset= 0x00 */
	__IO uint32_t EMR;				/*!< Event mask register 									       Address Offset= 0x04 */
	__IO uint32_t RTSR;				/*!< Rising trigger selection register 							   Address Offset= 0x08 */
	__IO uint32_t FTSR;				/*!< Falling trigger selection register 						   Address Offset= 0x0C */
	__IO uint32_t SWIER;			/*!< Software interrupt event register 							   Address Offset= 0x10 */
	__IO uint32_t PR;				/*!< Pending register 											   Address Offset= 0x14 */


}EXTI_TypeDef_t;

typedef struct
{
	__IO uint32_t CR1;				/*!< SPI Control register 1										   Address Offset= 0x00 */
	__IO uint32_t CR2;				/*!< SPI control register 2 									   Address Offset= 0x04 */
	__IO uint32_t SR;				/*!< SPI Status register										   Address Offset= 0x08 */
	__IO uint32_t DR;				/*!< SPI data register											   Address Offset= 0x0C */
	__IO uint32_t CRCPR;			/*!< SPI CRC polynomial register 								   Address Offset= 0x10 */
	__IO uint32_t RXCRCR;			/*!< SPI RX CRC register	 									   Address Offset= 0x14 */
	__IO uint32_t TXCRCR;			/*!< SPI TX CRC register 										   Address Offset= 0x18 */
	__IO uint32_t I2SCFGR;			/*!< SPI_I2S Configuration register 							   Address Offset= 0x1C */
	__IO uint32_t I2SPR;			/*!< SPI_I2S prescaler register  								   Address Offset= 0x20 */


}SPI_TypeDef_t;

/* Base address definitions of parts */


#define GPIOA           ((GPIO_TypeDef_t *)(GPIOA_BASE_ADDR)   )
#define GPIOB           ((GPIO_TypeDef_t *)(GPIOB_BASE_ADDR)   )
#define GPIOC           ((GPIO_TypeDef_t *)(GPIOC_BASE_ADDR)   )
#define GPIOD           ((GPIO_TypeDef_t *)(GPIOD_BASE_ADDR)   )
#define GPIOE           ((GPIO_TypeDef_t *)(GPIOE_BASE_ADDR)   )

#define RCC             ((RCC_TypeDef_t  * )(RCC_BASE_ADDR)    )

#define SYSCFG          ((SYSCFG_TypeDef_t *)(SYSCFG_BASE_ADDR))

#define EXTI 			((EXTI_TypeDef_t *)(EXTI_BASE_ADDR)    )

#define SPI1			((SPI_TypeDef_t *)(SPI1_BASE_ADDR)     )
#define SPI2			((SPI_TypeDef_t *)(SPI2_BASE_ADDR)     )
#define SPI3			((SPI_TypeDef_t *)(SPI3_BASE_ADDR)     )
#define SPI4			((SPI_TypeDef_t *)(SPI4_BASE_ADDR)     )


/*
 *
 * Bit definitions
 *
 */

#define RCC_AHB1ENR_GPIOAEN_Pos      (0U)									// RCC AHB1ENR register GPIOAEN Bit Position
#define RCC_AHB1ENR_GPIOAEN_Msk		 (0x1 << RCC_AHB1ENR_GPIOAEN_Pos)		// RCC AHB1ENR register GPIOAEN Bit Mask
#define RCC_AHB1ENR_GPIOAEN  		 RCC_AHB1ENR_GPIOAEN_Msk				// RCC AHB1ENR register GPIOAEN Macro

#define RCC_AHB1ENR_GPIOBEN_Pos      (1U)									// RCC AHB1ENR register GPIOBEN Bit Position
#define RCC_AHB1ENR_GPIOBEN_Msk		 (0x1 << RCC_AHB1ENR_GPIOBEN_Pos)		// RCC AHB1ENR register GPIOBEN Bit Mask
#define RCC_AHB1ENR_GPIOBEN  		 RCC_AHB1ENR_GPIOBEN_Msk				// RCC AHB1ENR register GPIOBEN Macro

#define RCC_AHB1ENR_GPIOCEN_Pos      (2U)									// RCC AHB1ENR register GPIOCEN Bit Position
#define RCC_AHB1ENR_GPIOCEN_Msk		 (0x1 << RCC_AHB1ENR_GPIOCEN_Pos)		// RCC AHB1ENR register GPIOCEN Bit Mask
#define RCC_AHB1ENR_GPIOCEN  		 RCC_AHB1ENR_GPIOCEN_Msk				// RCC AHB1ENR register GPIOCEN Macro

#define RCC_AHB1ENR_GPIODEN_Pos      (3U)									// RCC AHB1ENR register GPIODEN Bit Position
#define RCC_AHB1ENR_GPIODEN_Msk		 (0x1 << RCC_AHB1ENR_GPIODEN_Pos)		// RCC AHB1ENR register GPIODEN Bit Mask
#define RCC_AHB1ENR_GPIODEN  		 RCC_AHB1ENR_GPIODEN_Msk				// RCC AHB1ENR register GPIODEN Macro

#define RCC_APB2ENR_SYSCFGEN_Pos	(14U)									// RCC APB2ENR register SYSCFGEN Bit Position
#define RCC_APB2ENR_SYSCFGEN_Msk	(0x1 << RCC_APB2ENR_SYSCFGEN_Pos)		// RCC APB2ENR register SYSCFGEN Bit Mask
#define RCC_APB2ENR_SYSCFGEN		RCC_APB2ENR_SYSCFGEN_Msk				// RCC APB2ENR register SYSCFGEN Macro

#define RCC_APB2ENR_SPI1EN_Pos		(12U)									// RCC APB2ENR register SPI1EN Bit Position
#define RCC_APB2ENR_SPI1EN_Msk		(0x1 << RCC_APB2ENR_SPI1EN_Pos)			// RCC APB2ENR register SPI1EN Bit Mask
#define RCC_APB2ENR_SPI1EN			RCC_APB2ENR_SPI1EN_Msk					// RCC APB2ENR register SPI1EN Macro

#define RCC_APB2ENR_SPI2EN_Pos		(14U)									// RCC APB1ENR register SPI2EN Bit Position
#define RCC_APB2ENR_SPI2EN_Msk		(0x1 << RCC_APB1ENR_SPI2EN_Pos)			// RCC APB1ENR register SPI2EN Bit Mask
#define RCC_APB2ENR_SPI2EN			RCC_APB1ENR_SPI2EN_Msk					// RCC APB1ENR register SPI2EN Macro

#define SPI_SR_Busy					(7U)
#define SPI_CR1_SPE 				(6U)
#define SPI_SR_TxE					(1U)
#define SPI_SR_RxNE					(0U)


/*
 *
 * Flag definitions
 *
 */


#define SPI_TxE_FLAG				(0x1U << SPI_SR_TxE)
#define SPI_Busy_FLAG				(0x1U << SPI_SR_Busy)
#define SPI_RxNE_FLAG				(0x1U << SPI_SR_RxNE)

#include "RCC.h"
#include "GPIO.h"
#include "EXTI.h"
#include "SPI.h"


#endif /* INC_STM32F407XX_H_ */

